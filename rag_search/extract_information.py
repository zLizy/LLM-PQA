# RAG reference
from pymongo import MongoClient
from langchain_mongodb import MongoDBAtlasVectorSearch
from langchain_community.document_loaders.directory import DirectoryLoader
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain.chains.retrieval_qa.base import RetrievalQA
from langchain_community.llms import openai
import gradio as gr
from gradio.themes.base import Base
import key_param   

client = MongoClient(key_param.MONGO_URI)
# dbName = "langchain"
# collectionName = "collection_of_text_blobs"
# collection = client[dbName][collectionName]

dbName = "models"
collectionName = "collection_of_model_description"
model_collection = client[dbName][collectionName]

embeddings = OpenAIEmbeddings(openai_api_key=key_param.OPENAI_API_KEY)

vectorStore = MongoDBAtlasVectorSearch(model_collection, embeddings)

def query_data(query):
    docs = vectorStore.similarity_search(query,K=1)  #perform an atlas vector search using lang chain's vector store, retrieve the most similar document based on the query vector
    as_output = docs[0].page_content #extract the page content from the top document in the list(most relevant info)

    # llm = OpenAI(openai_api_key=key_param.OPENAI_API_KEY, temperature = 0) 
    llm = ChatOpenAI(openai_api_key=key_param.OPENAI_API_KEY)
    retriever = vectorStore.as_retriever()                                     #use LLM to fetch documents that are relevant to the query
    qa = RetrievalQA.from_chain_type(llm,chain_type="stuff",retriever=retriever)
    retriever_output = qa.invoke(query)

    return as_output, retriever_output   #as_output is the most similar document from the atlas vector search, retriever_output is generated by RAG

with gr.Blocks(theme=Base(),title="Question Answering App using Vector Search + RAG") as UI:
    gr.Markdown(
        """
        #Question Answering App using Atlas Vector Search + RAG Architecture 
        """)
    textbox = gr.Textbox(label="Enter your Query")
    with gr.Row():
        button = gr.Button("Submit",variant="primary")
    with gr.Column():
        output1 = gr.Textbox(lines=1, max_lines=10, label="Output with MongoDB Atlas Vector Search")
        output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by RAG")

    button.click(query_data,textbox,outputs=[output1,output2])

UI.launch()